var documenterSearchIndex = {"docs":
[{"location":"api/#Usage","page":"API","title":"Usage","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"@deprecate_kws","category":"page"},{"location":"api/#DeprecateKeywords.@deprecate_kws","page":"API","title":"DeprecateKeywords.@deprecate_kws","text":"@deprecate_kws(deprecations, def)\n\nMacro to deprecate keyword arguments. deprecations should be a tuple of keyword arguments to deprecate, like (new_kw1=old_kw1, new_kw2=old_kw2). def should be the function definition.\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Home","title":"Home","text":"(Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"DeprecateKeywords defines a macro for keyword deprecation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DeprecateKeywords\n\n@deprecate_kws (a=b, c=d) function f(;a=2, c=3)\n    a + c\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"With this, we can use both the old and new keywords (making sure to start with --depwarn=yes). If using the old keyword, it will automatically be passed to the new keyword, but with a deprecation warning.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> f(a=1, c=2)\n3\n\njulia> f(b=1, c=2)\n┌ Warning: Keyword argument `b` is deprecated. Use `a` instead.\n│   caller = top-level scope at REPL[5]:1\n└ @ Core REPL[5]:1\n3","category":"page"}]
}
